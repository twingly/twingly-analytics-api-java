package com.twingly.search.domain;

/**
 * This enum contain all supported by Twingly locations
 *
 * @see <a href="https://app.twingly.com/blog_search?tab=documentation">Supported locations</a>
 * @since 1.1.0
 */
public enum Location {
    Andorra("ad"),
    UnitedArabEmirates("ae"),
    Afghanistan("af"),
    AntiguaAndBarbuda("ag"),
    Anguilla("ai"),
    Albania("al"),
    Armenia("am"),
    Angola("ao"),
    Antarctica("aq"),
    Argentina("ar"),
    AmericanSamoa("as"),
    Austria("at"),
    Australia("au"),
    Aruba("aw"),
    AlandIslands("ax"),
    Azerbaijan("az"),
    BosniaAndHerzegovina("ba"),
    Barbados("bb"),
    Bangladesh("bd"),
    Belgium("be"),
    BurkinaFaso("bf"),
    Bulgaria("bg"),
    Bahrain("bh"),
    Burundi("bi"),
    Benin("bj"),
    SaintBarth("bl"),
    Bermuda("bm"),
    BruneiDarussalam("bn"),
    Bolivia("bo"),
    Bonaire("bq"),
    Brazil("br"),
    Bahamas("bs"),
    Bhutan("bt"),
    BouvetIsland("bv"),
    Botswana("bw"),
    Belarus("by"),
    Belize("bz"),
    Canada("ca"),
    Cocos("cc"),
    DemocraticRepublicOfCongo("cd"),
    CentralAfricanRepublic("cf"),
    Congo("cg"),
    Switzerland("ch"),
    IvoryCoast("ci"),
    CookIslands("ck"),
    Chile("cl"),
    Cameroon("cm"),
    China("cn"),
    Colombia("co"),
    CostaRica("cr"),
    Cuba("cu"),
    CapeVerde("cv"),
    Curacao("cw"),
    ChristmasIsland("cx"),
    Cyprus("cy"),
    CzechRepublic("cz"),
    Germany("de"),
    Djibouti("dj"),
    Denmark("dk"),
    Dominica("dm"),
    DominicanRepublic("do"),
    Algeria("dz"),
    Ecuador("ec"),
    Estonia("ee"),
    Egypt("eg"),
    WesternSahara("eh"),
    Eritrea("er"),
    Spain("es"),
    Ethiopia("et"),
    Finland("fi"),
    Fiji("fj"),
    FalklandIslands("fk"),
    Micronesia("fm"),
    FaroeIslands("fo"),
    France("fr"),
    Gabon("ga"),
    UnitedKingdom("gb"),
    Grenada("gd"),
    Georgia("ge"),
    FrenchGuiana("gf"),
    Guernsey("gg"),
    Ghana("gh"),
    Gibraltar("gi"),
    Greenland("gl"),
    Gambia("gm"),
    Guinea("gn"),
    Guadeloupe("gp"),
    EquatorialGuinea("gq"),
    Greece("gr"),
    SouthGeorgiaAndTheSouthSandwichIslands("gs"),
    Guatemala("gt"),
    Guam("gu"),
    GuineaBissau("gw"),
    Guyana("gy"),
    HongKong("hk"),
    HeardIslandandMcdonaldIslands("hm"),
    Honduras("hn"),
    Croatia("hr"),
    Haiti("ht"),
    Hungary("hu"),
    Indonesia("id"),
    Ireland("ie"),
    Israel("il"),
    IsleofMan("im"),
    India("in"),
    BritishIndianOceanTerritory("io"),
    Iraq("iq"),
    Iran("ir"),
    Iceland("is"),
    Italy("it"),
    Jersey("je"),
    Jamaica("jm"),
    Jordan("jo"),
    Japan("jp"),
    Kenya("ke"),
    Kyrgyzstan("kg"),
    Cambodia("kh"),
    Kiribati("ki"),
    Comoros("km"),
    SaintKittsandNevis("kn"),
    DemocraticPeoplesRepublicOfKorea("kp"),
    RepublicofKorea("kr"),
    Kuwait("kw"),
    CaymanIslands("ky"),
    Kazakhstan("kz"),
    LaoPeoplesDemocraticRepublic("la"),
    Lebanon("lb"),
    SaintLucia("lc"),
    Liechtenstein("li"),
    SriLanka("lk"),
    Liberia("lr"),
    Lesotho("ls"),
    Lithuania("lt"),
    Luxembourg("lu"),
    Latvia("lv"),
    Libya("ly"),
    Morocco("ma"),
    Monaco("mc"),
    Moldova("md"),
    Montenegro("me"),
    SaintMartin("mf"),
    Madagascar("mg"),
    MarshallIslands("mh"),
    Macedonia("mk"),
    Mali("ml"),
    Myanmar("mm"),
    Mongolia("mn"),
    Macao("mo"),
    NorthernMarianaIslands("mp"),
    Martinique("mq"),
    Mauritania("mr"),
    Montserrat("ms"),
    Malta("mt"),
    Mauritius("mu"),
    Maldives("mv"),
    Malawi("mw"),
    Mexico("mx"),
    Malaysia("my"),
    Mozambique("mz"),
    Namibia("na"),
    NewCaledonia("nc"),
    Niger("ne"),
    NorfolkIsland("nf"),
    Nigeria("ng"),
    Nicaragua("ni"),
    Netherlands("nl"),
    Norway("no"),
    Nepal("np"),
    Nauru("nr"),
    Niue("nu"),
    NewZealand("nz"),
    Oman("om"),
    Panama("pa"),
    Peru("pe"),
    FrenchPolynesia("pf"),
    PapuaNewGuinea("pg"),
    Philippines("ph"),
    Pakistan("pk"),
    Poland("pl"),
    SaintPierreandMiquelon("pm"),
    Pitcairn("pn"),
    PuertoRico("pr"),
    Palestine("ps"),
    Portugal("pt"),
    Palau("pw"),
    Paraguay("py"),
    Qatar("qa"),
    Reunion("re"),
    Romania("ro"),
    Serbia("rs"),
    RussianFederation("ru"),
    Rwanda("rw"),
    SaudiArabia("sa"),
    SolomonIslands("sb"),
    Seychelles("sc"),
    Sudan("sd"),
    Sweden("se"),
    Singapore("sg"),
    SaintHelena("sh"),
    Slovenia("si"),
    SvalbardandJanMayen("sj"),
    Slovakia("sk"),
    SierraLeone("sl"),
    SanMarino("sm"),
    Senegal("sn"),
    Somalia("so"),
    Suriname("sr"),
    SouthSudan("ss"),
    SaoTomeandPrincipe("st"),
    ElSalvador("sv"),
    SintMaarten("sx"),
    SyrianArabRepublic("sy"),
    Swaziland("sz"),
    TurksandCaicosIslands("tc"),
    Chad("td"),
    FrenchSouthernTerritories("tf"),
    Togo("tg"),
    Thailand("th"),
    Tajikistan("tj"),
    Tokelau("tk"),
    Timor("tl"),
    Turkmenistan("tm"),
    Tunisia("tn"),
    Tonga("to"),
    Turkey("tr"),
    TrinidadandTobago("tt"),
    Tuvalu("tv"),
    Taiwan("tw"),
    Tanzania("tz"),
    Ukraine("ua"),
    Uganda("ug"),
    UnitedStatesMinorOutlyingIslands("um"),
    UnitedStates("us"),
    Uruguay("uy"),
    Uzbekistan("uz"),
    HolySee("va"),
    SaintVincentAndTheGrenadines("vc"),
    Venezuela("ve"),
    BritishVirginIslands("vg"),
    USVirginIslands("vi"),
    Vietnam("vn"),
    Vanuatu("vu"),
    WallisandFutuna("wf"),
    Samoa("ws"),
    Yemen("ye"),
    Mayotte("yt"),
    SouthAfrica("za"),
    Zambia("zm"),
    Zimbabwe("zw");

    /**
     * Represents two-letter <a href="https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2">ISO 3166-1 alpha-2</a> code
     */
    private final String isoCode;

    Location(String isoCode) {
        this.isoCode = isoCode;
    }

    /**
     * Create Location enum from iso code representation.
     *
     * @param isoCode the iso code
     * @return the location with given ISO code or null, if no location for ISO code was found
     */
    public static Location fromIsoCode(String isoCode) {
        for (Location language : values()) {
            if (language.isoCode.equalsIgnoreCase(isoCode)) {
                return language;
            }
        }
        return null;
    }

    /**
     * Gets ISO code of Location
     *
     * @return ISO code of location
     */
    public String getIsoCode() {
        return isoCode;
    }
}
